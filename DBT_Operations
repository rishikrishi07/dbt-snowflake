Database Operations Possible with dbt
dbt (data build tool) primarily focuses on the transformation layer of the data stack. Here's a comprehensive list of database operations you can perform with dbt:

Model Creation and Transformation

Creating tables and views
Materializing data as tables, views, incremental tables, or ephemeral models
Complex data transformations using SQL
Creating persistent derived tables


Schema Management

Creating and managing schemas
Schema migrations and version control
Custom schema naming based on environment


Data Quality Operations

Implementing data tests (unique, not null, accepted values, relationships)
Custom data validation with SQL
Schema tests and column-level tests
Custom test macros


Metadata Management

Adding descriptions to tables and columns
Documenting data lineage
Building and maintaining data dictionaries


Data Modeling Patterns

Implementing dimensional modeling (star/snowflake schemas)
Building slowly changing dimensions (SCDs)
Creating data marts and aggregation tables


Incremental Processing

Append-only incremental loads
Merge operations (upserts)
Snapshot creation for historical tracking (Type 2 SCD implementation)


Source Data Integration

Defining source tables and their freshness constraints
Validating source data quality
Creating staging models from source data


Advanced SQL Operations

Window functions
Common Table Expressions (CTEs)
Pivot/unpivot operations
Recursive CTEs (where supported by the database)


Database-Specific Optimizations

Partitioning tables
Clustering tables
Creating indexes
Setting table distribution styles (for warehouse-specific optimizations)


Data Orchestration

Managing dependencies between models
Selective model execution
Parallel execution of independent models


Cross-Database Operations

Creating cross-database references (where supported)
Managing database-specific SQL syntax through adapters


Hooks and Operational Triggers

Pre- and post-model hooks
On-run-start and on-run-end hooks
Custom operations via hooks


Seed Data Management

Loading reference/static data from CSV files
Version-controlling reference data



It's important to note that dbt doesn't perform extraction or loading operations (the "E" and "L" in ELT/ETL). It focuses exclusively on transformation and doesn't directly connect to source systems or handle data ingestion.RetryRCan you share DBT operations with Snowflake Database like aboveEditdbt Operations with Snowflake Database
When using dbt with Snowflake specifically, you can leverage these Snowflake-optimized operations:

Snowflake-Specific Materializations

Tables (permanent Snowflake tables)
Views (Snowflake views)
Incremental models (efficient updates)
Ephemeral models (CTEs)
Materializing as Snowflake secure views


Performance Optimization

Clustering keys configuration (cluster_by)
Table distribution strategies (dist)
Managing table partitions (automatic clustering)
Warehouse sizing configurations for specific models


Snowflake Storage Options

Transient tables (reduced Time Travel and Fail-safe costs)
Managing table retention periods
Setting table and column-level access policies


Query Acceleration

Search optimization configuration
Managing Snowflake search optimization service
Query tags for resource monitoring


Data Type Management

Snowflake-specific data types (VARIANT, OBJECT, ARRAY)
Semi-structured data processing (JSON, Avro, XML, Parquet)
Time Travel queries


Zero-Copy Cloning

Creating zero-copy clones for development schemas
Test environment setup using Snowflake clones


Snowflake External Functions

Integrating with external API calls via Snowflake external functions
Accessing remote services from dbt models


Dynamic Data Masking

Implementing column-level security policies
Managing masked views for sensitive data


Stream and Task Integration

Creating Snowflake streams for change data capture
Setting up Snowflake tasks via post-hooks


Multi-Cluster Warehouse Management

Specifying warehouse for specific model runs
Scaling warehouse resources for intensive transformations


Secure Data Sharing

Managing Snowflake secure views
Setting up outbound shares


Snowflake Stage Management

Interacting with Snowflake stages via custom macros
Loading data from stages into models


Stored Procedure Integration

Calling Snowflake stored procedures from dbt models
Wrapping complex logic in procedures


Specialized Snowflake SQL

Snowflake's SQL extensions and functions
QUALIFY clause usage
MATCH_RECOGNIZE pattern matching
LATERAL joins and table functions


Resource Monitoring

Setting query tags for resource attribution
Custom resource monitors through hooks


Snowpark Integration

Leveraging Snowpark UDFs in models (via macros)
Python models with Snowpark (newer dbt versions)


Data Governance

Object tagging for governance
Managing Snowflake access controls


Snowflake Optimized Snapshots

Time Travel-based snapshots
Efficient historical data tracking


Multi-Database Operations

Cross-database references in Snowflake
Cross-schema references
